{
	"info": {
		"_postman_id": "fce88fa9-92f7-47ca-8ba1-4b98ae7cb595",
		"name": "ДЗ 7.1 Change task Ляпунцова",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "32697811-fce88fa9-92f7-47ca-8ba1-4b98ae7cb595"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee647e07-779d-46bf-ac9b-14408ca4bb30",
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set('token', jsonData.id_token)",
							"",
							"let chai = require('chai');",
							"let expect = chai.expect;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Status message is OK\", function () {",
							"    expect(pm.response.reason()).to.equal(\"OK\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"    expect(pm.response.text()).to.include(\"id_token\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"let moment = require('moment');",
							"let ourDate = moment().utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');",
							"console.log(ourDate);",
							"let responseDate = pm.response.headers.get('Date');",
							"let formattedResponseDate = moment(responseDate).utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');",
							"pm.test(\"Date in response header is correct\", function () {",
							"    expect(formattedResponseDate).to.eql(ourDate);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f96b7d4c-2ac2-42af-b07c-4f9a1c01f3fb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"svetlanalya321\",\r\n    \"password\": \"SvetlanaLya321\",\r\n    \"rememberMe\": false\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "810e545d-71c9-4f5a-83cd-156840a34420",
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.text).to.eql(\"some text\");",
							"});",
							"",
							"pm.environment.set(\"task_id\", jsonData.id)",
							"",
							"let chai = require('chai');",
							"let expect = chai.expect;",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"Status message is Created\", function () {",
							"    expect(pm.response.reason()).to.equal(\"Created\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"     expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"     expect(pm.response.text()).to.include(\"text\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"     expect(pm.response.text()).to.include(\"answer\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"     expect(pm.response.text()).to.include(\"title\");",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"let moment = require('moment');",
							"let ourDate = moment().utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');",
							"console.log(ourDate);",
							"let responseDate = pm.response.headers.get('Date');",
							"let formattedResponseDate = moment(responseDate).utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');",
							"pm.test(\"Date in response header is correct\", function () {",
							"    expect(formattedResponseDate).to.eql(ourDate);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "3f792cce-e235-4486-b755-5269f8360654",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}\nlet chai = require('chai');\nassert.equal(Status, '200', 'Status code is 200');\n\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89b70986-1c74-4735-a896-ce62968d931f",
						"exec": [
							"let chai = require('chai');\r",
							"let expect = chai.expect;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    expect(pm.response.reason()).to.equal(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected text\", function () {\r",
							"     expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected text\", function () {\r",
							"     expect(pm.response.text()).to.include(\"text\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected text\", function () {\r",
							"     expect(pm.response.text()).to.include(\"answer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected text\", function () {\r",
							"     expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"let moment = require('moment');\r",
							"let ourDate = moment().utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');\r",
							"console.log(ourDate);\r",
							"let responseDate = pm.response.headers.get('Date');\r",
							"let formattedResponseDate = moment(responseDate).utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');\r",
							"pm.test(\"Date in response header is correct\", function () {\r",
							"    expect(formattedResponseDate).to.eql(ourDate);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c9d10ffb-c353-4c56-92ef-d478885ba326",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=100",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d51ab3bf-07e7-4584-9ff5-8ab778eed488",
						"exec": [
							"let chai = require('chai');\r",
							"let expect = chai.expect;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    expect(pm.response.reason()).to.equal(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected text\", function () {\r",
							"     expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected text\", function () {\r",
							"     expect(pm.response.text()).to.include(\"text\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected text\", function () {\r",
							"     expect(pm.response.text()).to.include(\"answer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected text\", function () {\r",
							"     expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"let moment = require('moment');\r",
							"let ourDate = moment().utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');\r",
							"console.log(ourDate);\r",
							"let responseDate = pm.response.headers.get('Date');\r",
							"let formattedResponseDate = moment(responseDate).utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');\r",
							"pm.test(\"Date in response header is correct\", function () {\r",
							"    expect(formattedResponseDate).to.eql(ourDate);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "cd6355aa-333a-4c5e-8d1b-92cb684745e9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{task_id}},\n  \"text\": \"some new new text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81c87894-d478-4e21-87ae-074fb3d39004",
						"exec": [
							"pm.sendRequest(",
							"    {url: 'https://sqlverifier-50d286d70656.herokuapp.com/api/tasks/3070',",
							"    method: 'DELETE',",
							"    header:",
							"    {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"    'accept': '*/*'}",
							"    }",
							"    , function (err, response) {",
							"    console.log(response);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status message is OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"text\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"answer\");",
							"});",
							"",
							"pm.test(\"Response body contains expected text\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"title\");",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"let moment = require('moment');",
							"let ourDate = moment().utc().startOf('minute').format('YYYY-MM-DD HH:mm LL')",
							"console.log(ourDate)",
							"let responseDate = pm.response.headers.get('Date')",
							"let formattedResponseDate = moment(responseDate).utc().startOf('minute').format('YYYY-MM-DD HH:mm LL');",
							"pm.test(\"Date in response header is correct\", function () {",
							"    pm.expect(formattedResponseDate).to.eql(ourDate);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "e16c0ef7-c454-46c1-8256-ddbb7f8fd13d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8f48e814-928c-4da2-8dee-05bb0aeb8036",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "745c38bf-af38-4917-aaba-31a05d0729bc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}